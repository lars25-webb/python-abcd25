#!/usr/bin/env python3
"""
An autogenerated testfile for python.
"""

import os
import unittest
from io import StringIO
from unittest import TextTestRunner
from unittest.mock import patch

from tester import (ExamTestCase, ExamTestResult, import_module,
                    setup_and_get_repo_path, tags)

FILE_DIR = os.path.dirname(os.path.realpath(__file__))
REPO_PATH = setup_and_get_repo_path(FILE_DIR)


class Test1ConvertStructure(ExamTestCase):

    def get_output_from_program(self, inp):
        """
        One function for testing print input functions
        """
        with patch("builtins.input", side_effect=inp):
            with patch("sys.stdout", new=StringIO()) as fake_out:
                import_module(REPO_PATH, "convert")
                return fake_out.getvalue()

    @tags("speed", "s", "S")
    def test_a_speed_float(self):
        """
        Testar kilometer till miles med decimaltal som input.
        Använder följande som input:
        {arguments}
        Förväntar att följande finns med i utskrift:
        {correct}
        Fick följande:
        {student}
        """
        self.norepr = True
        self._multi_arguments = ["0.3", "S"]
        output_from_program = self.get_output_from_program(self._multi_arguments)
        self.assertIn("0.3 ", output_from_program)
        self.assertIn("0.19 ", output_from_program)

    @tags("speed", "s", "S")
    def test_b_speed_lower(self):
        """
        Testar kilometer till miles med heltal och litet s som input.
        Använder följande som input:
        {arguments}
        Förväntar att följande finns med i utskrift:
        {correct}
        Fick följande:
        {student}
        """
        self.norepr = True
        self._multi_arguments = ["999", "s"]
        output_from_program = self.get_output_from_program(self._multi_arguments)
        self.assertIn("999.0 ", output_from_program)
        self.assertIn("620.75 ", output_from_program)

    @tags("price", "p", "P")
    def test_c_price_float(self):
        """
        Testar räkna ut pris efter rabatt med decimaltal som input.
        Använder följande som input:
        {arguments}
        Förväntar att följande finns med i utskrift:
        {correct}
        Fick följande:
        {student}
        """
        self.norepr = True
        self._multi_arguments = ["0.2", "P"]
        output_from_program = self.get_output_from_program(self._multi_arguments)
        self.assertIn("0.2 ", output_from_program)
        self.assertIn("-11.76 ", output_from_program)

    @tags("price", "p", "P")
    def test_d_price_lower(self):
        """
        Testar räkna ut pris efter rabatt med heltal och litet p som input.
        Använder följande som input:
        {arguments}
        Förväntar att följande finns med i utskrift:
        {correct}
        Fick följande:
        {student}
        """
        self.norepr = True
        self._multi_arguments = ["999", "p"]
        output_from_program = self.get_output_from_program(self._multi_arguments)
        self.assertIn("999.0 ", output_from_program)
        self.assertIn("1186.8 ", output_from_program)

if __name__ == "__main__":
    runner = TextTestRunner(resultclass=ExamTestResult, verbosity=2)
    unittest.main(testRunner=runner, exit=False)
