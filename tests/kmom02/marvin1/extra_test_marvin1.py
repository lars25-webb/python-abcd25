#!/usr/bin/env python3
"""
An autogenerated testfile for python.
"""

import unittest
from io import StringIO
import os
import sys
from unittest import TextTestRunner
from unittest.mock import patch

from tester import ExamTestCase, ExamTestResult, import_module, tags, setup_and_get_repo_path

FILE_DIR = os.path.dirname(os.path.realpath(__file__))
REPO_PATH = setup_and_get_repo_path(FILE_DIR)



class Test3ExtraMarvin1(ExamTestCase):
    """
    Each assignment has 1 testcase with multiple asserts.
    The different asserts https://docs.python.org/3.6/library/unittest.html#test-cases
    """


    def check_print_contain(self, inp, correct):
        """
        One function for testing print input functions.
        """
        with patch("builtins.input", side_effect=inp):
            with patch("sys.stdout", new=StringIO()) as fake_out:
                import_module(REPO_PATH, 'marvin')
                str_data = fake_out.getvalue()
                self.assertIn(correct, str_data)



    @tags("a1")
    def test_a1_check_letters_valid(self):
        """
        Testar menyval a1
        Använder följande som input:
        {arguments}
        Förväntar att följande finns med i utskrift:
        {correct}
        Fick följande:
        {student}
        """
        self.norepr = True
        self._multi_arguments = ["a1", "Extemporera", "ropa", "", "q"]

        self.check_print_contain(self._multi_arguments, "Match!")



    @tags("a1")
    def test_a2_check_letters_invalid_two(self):
        """
        Testar menyval a1
        Använder följande som input:
        {arguments}
        Förväntar att följande finns med i utskrift:
        {correct}
        Fick följande:
        {student}
        """
        self.norepr = True
        self._multi_arguments = ["a1", "Extemporera", "ropade", "", "q"]

        self.check_print_contain(self._multi_arguments, "No match!")



    @tags("a1")
    def test_a3_check_letters_invalid_two(self):
        """
        Testar menyval a1. Dubbla av samma bokstav ska inte räknas som en.
        Använder följande som input:
        {arguments}
        Förväntar att följande finns med i utskrift:
        {correct}
        Fick följande:
        {student}
        """
        self.norepr = True
        self._multi_arguments = ["a1", "mister", "isse", "", "q"]

        self.check_print_contain(self._multi_arguments, "No match!")



    @tags("a2")
    def test_b1_multiplier_correct_high(self):
        """
        Testar menyval a2
        Använder följande som input:
        {arguments}
        Förväntar att följande finns med i utskrift:
        {correct}
        Fick följande:
        {student}
        """
        self.norepr = True
        self._multi_arguments = ["a2", "2", "100", "", "q"]

        self.check_print_contain(self._multi_arguments, "67 times")



    @tags("a2")
    def test_b2_multiplier_correct_low(self):
        """
        Testar menyval a2
        Använder följande som input:
        {arguments}
        Förväntar att följande finns med i utskrift:
        {correct}
        Fick följande:
        {student}
        """
        self.norepr = True
        self._multi_arguments = ["a2", "1234567890", "2", "", "q"]

        self.check_print_contain(self._multi_arguments, "0 times")



    @tags("a2")
    def test_b3_multiplier_correct_fail(self):
        """
        Testar menyval a2
        Använder följande som input:
        {arguments}
        Förväntar att följande finns med i utskrift:
        {correct}
        Fick följande:
        {student}
        """
        self.norepr = True
        self._multi_arguments = ["a2", "555", "5", "", "q"]

        self.check_print_contain(self._multi_arguments, "-1 times")


    @tags("a3")
    def test_d1_concatinate_names(self):
        """
        Testar menyval a3
        Använder följande som input:
        {arguments}
        Förväntar att följande finns med i utskrift:
        {correct}
        Fick följande:
        {student}
        """
        self.norepr = True
        self._multi_arguments = ["a3", "sheldon", "amy", "", "q"]

        self.check_print_contain(self._multi_arguments, "shamy")



    @tags("a3")
    def test_d2_concatinate_names_two(self):
        """
        Testar menyval a3
        Använder följande som input:
        {arguments}
        Förväntar att följande finns med i utskrift:
        {correct}
        Fick följande:
        {student}
        """
        self.norepr = True
        self._multi_arguments = ["a3", "brad", "angelina", "", "q"]

        self.check_print_contain(self._multi_arguments, "brangelina")



    @tags("a4")
    def test_d3_point_per_player(self):
        """
        Testar menyval a4
        Använder följande som input:
        {arguments}
        Förväntar att följande finns med i utskrift:
        {correct}
        Fick följande:
        {student}
        """
        self.norepr = True
        self._multi_arguments = ["a4", "a2b4a4s3B1", "", "q"]

        self.check_print_contain(self._multi_arguments, "a 6, b 3, s 3")



    @tags("a4")
    def test_d4_point_per_player_two(self):
        """
        Testar menyval a4
        Använder följande som input:
        {arguments}
        Förväntar att följande finns med i utskrift:
        {correct}
        Fick följande:
        {student}
        """
        self.norepr = True
        self._multi_arguments = ["a4", "g3l1H5l2G3l1", "", "q"]

        self.check_print_contain(self._multi_arguments, "g 0, l 4, h -5")




if __name__ == '__main__':
    runner = TextTestRunner(resultclass=ExamTestResult, verbosity=2)
    unittest.main(testRunner=runner, exit=False)
